-- 14.01.2018 10:11:26 AR V1.0a

generic = {
  name = 'Interval Test',
  parameter = {
    min = 0,
    max = 1
  },

  init = function(self)
    block.setInputsPinCount(1)
    block.setOutputsPinCount(1)
    block.setOutputPinTypeRestrains(1, 'boolean')
    block.modifyFlags('SupressStartFunctionCall', true)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', self.name, 'Determine if signal is in specified interval')
    gui.add('Edit', 'EditMin', 'Min value')
    gui.add('Edit', 'EditMax', 'Max value')
    gui.set('EditMin', 'Number', self.parameter.min)
    gui.set('EditMax', 'Number', self.parameter.max)
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.min = gui.get('EditMin', 'Number')
    self.parameter.max = gui.get('EditMax', 'Number')
    return gui.assert(
      self.name,
      self.parameter.min < self.parameter.max, 'Min value must less then max value')
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar(0x00, "", [[
      draw.setColorA(0.7, 0.7, 0.7)
      draw.line(px(30), py(60), px(70), py(60))
      draw.line(px(45), py(20), px(45), py(80))
      draw.setColorA(0, 0, 0)
      draw.line(px(30), py(55), px(40), py(55), px(40), py(30), px(60), py(30), px(60), py(55), px(70), py(55))
    ]])
  end,

  generate = function(self)
    local source =
      [==[
        local block = {}

        block.step = function(a)
          return a >= MIN and a <= MAX
        end

        return block
      ]==]
    local replaces = {}
    replaces['MIN'] = self.parameter.min
    replaces['MAX'] = self.parameter.max
    return string.gsub(source, '%a+', replaces)
  end,

}

